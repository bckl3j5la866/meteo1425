import asyncio
import logging
import os
from aiohttp import web
import time
from bot_core import initialize_bot
from config import ConfigLoader
from telegram_notifier import close_bot_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class HealthCheckServer:
    """
    HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health-check —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    """
    
    def __init__(self, port: int = 8080):
        self.port = port
        self.app = web.Application()
        self.runner = None
        self.setup_routes()
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.scheduler = None
        
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        self.app.router.add_get('/health', self.health_handler)
        self.app.router.add_get('/health/detailed', self.detailed_health_handler)
        self.app.router.add_get('/health/status', self.status_handler)
        
    def set_components(self, scheduler):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        self.scheduler = scheduler
    
    async def health_handler(self, request):
        """–ë–∞–∑–æ–≤—ã–π health-check - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤"""
        return web.json_response({
            "status": "healthy",
            "timestamp": time.time(),
            "service": "weather_bot",
            "version": "1.0.0"
        })
    
    async def detailed_health_handler(self, request):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        health_status = {
            "status": "healthy",
            "timestamp": time.time(),
            "service": "weather_bot",
            "checks": {
                "telegram": await self.check_telegram_health(),
                "scheduler": await self.check_scheduler_health(),
                "system": await self.check_system_health()
            }
        }
        
        # –ï—Å–ª–∏ –ª—é–±–æ–π –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ–∑–¥–æ—Ä–æ–≤ - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å "degraded"
        if any(check["status"] == "unhealthy" for check in health_status["checks"].values()):
            health_status["status"] = "degraded"
        elif any(check["status"] == "degraded" for check in health_status["checks"].values()):
            health_status["status"] = "degraded"
            
        return web.json_response(health_status)
    
    async def status_handler(self, request):
        """–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            "status": "running",
            "timestamp": time.time(),
            "uptime": getattr(self, '_start_time', time.time()),
            "active_tasks": len([t for t in asyncio.all_tasks() if not t.done()])
        }
        
        if self.scheduler:
            status["scheduler"] = {
                "active_tasks": len(self.scheduler.tasks),
                "parsers_count": len(self.scheduler.parsers)
            }
            
        return web.json_response(status)
    
    async def check_telegram_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Telegram –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            from telegram_notifier import get_telegram_status
            status = await get_telegram_status()
            return {
                "status": "healthy" if status.get("bot_configured", False) else "unhealthy",
                "details": {
                    "bot_configured": status.get("bot_configured", False)
                }
            }
        except Exception as e:
            return {"status": "unhealthy", "error": str(e)}
    
    async def check_scheduler_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if not self.scheduler:
                return {"status": "unhealthy", "error": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            active_tasks = len([t for t in self.scheduler.tasks if not t.done()])
            return {
                "status": "healthy" if active_tasks > 0 else "degraded",
                "details": {
                    "active_tasks": active_tasks,
                    "total_tasks": len(self.scheduler.tasks),
                    "parsers_count": len(self.scheduler.parsers)
                }
            }
        except Exception as e:
            return {"status": "unhealthy", "error": str(e)}
    
    async def check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        try:
            import psutil
            process = psutil.Process()
            memory_info = process.memory_info()
            
            return {
                "status": "healthy",
                "details": {
                    "memory_usage_mb": round(memory_info.rss / 1024 / 1024, 2),
                    "cpu_percent": process.cpu_percent(),
                    "threads_count": process.num_threads()
                }
            }
        except ImportError:
            return {
                "status": "healthy", 
                "details": {"message": "psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}
            }
        except Exception as e:
            return {"status": "degraded", "error": str(e)}
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ health-check —Å–µ—Ä–≤–µ—Ä–∞"""
        self._start_time = time.time()
        self.runner = web.AppRunner(self.app)
        await self.runner.setup()
        
        site = web.TCPSite(self.runner, '0.0.0.0', self.port)
        await site.start()
        
        logger.info(f"‚úÖ Health-check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
        logger.info(f"   ‚Ä¢ http://localhost:{self.port}/health")
        logger.info(f"   ‚Ä¢ http://localhost:{self.port}/health/detailed")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ health-check —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.runner:
            await self.runner.cleanup()
            logger.info("‚úÖ Health-check —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def run_bot_async():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    
    if not BOT_TOKEN:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return

    logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è health-check —Å–µ—Ä–≤–µ—Ä–∞
    health_server = HealthCheckServer(port=8080)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_loader = ConfigLoader("config.yaml")
    config = config_loader.load()
    
    if not config:
        error_msg = "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        logger.error(error_msg)
        return
    else:
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        scheduler = await initialize_bot(config)
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ health-check —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        health_server.set_components(scheduler)
        await health_server.start()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        next_check = await scheduler.log_next_check_time()
        if next_check:
            logger.info(f"‚è∞ {next_check}")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥–∞
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(30)
                
                new_config = config_loader.load_if_changed()
                if new_config and new_config != config:
                    logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º...")
                    await scheduler.update_config(new_config)
                    config = new_config
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ health-check —Å–µ—Ä–≤–µ—Ä–µ
                    health_server.set_components(scheduler)
                    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    
        except asyncio.CancelledError:
            logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}"
            logger.error(error_msg)
            raise

    except Exception as e:
        error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}"
        logger.exception(error_msg)
        raise
        
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        logger.debug("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health-check —Å–µ—Ä–≤–µ—Ä
        await health_server.stop()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        if tasks:
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á...")
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
            except Exception as e:
                error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}"
                logger.error(error_msg)
                
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        await close_bot_session()

async def shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("üõë –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞...")
    
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()
    
    try:
        await asyncio.gather(*tasks, return_exceptions=True)
        logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(run_bot_async())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Ctrl+C)")
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(close_bot_session())
            loop.close()
        except RuntimeError as e:
            logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é: {e}")
    except Exception as e:
        logger.critical(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(close_bot_session())
            loop.close()
        except RuntimeError as ex:
            logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é: {ex}")